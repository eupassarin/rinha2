-- CLIENTE
CREATE UNLOGGED TABLE IF NOT EXISTS C (
     I SMALLINT,
     L INT NULL,
     S INT DEFAULT 0 CONSTRAINT V check (S >= (L*-1))
);
CREATE INDEX PK_X ON C (I) INCLUDE (S);

INSERT INTO C (I, L) VALUES (1, 1000*100),(2, 800*100),(3, 10000*100),(4, 100000*100),(5, 5000*100);


CREATE OR REPLACE FUNCTION U_T_C()
    RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM T_C WHERE (I, R) IN (SELECT I, R FROM T WHERE I = NEW.I ORDER BY R DESC OFFSET 10);
    INSERT INTO T_C (I, V, P, D, R) VALUES (NEW.I, NEW.V, NEW.P, NEW.D, NEW.R);
END;
$$ LANGUAGE plpgsql;

-- TRANSACAO
CREATE UNLOGGED TABLE IF NOT EXISTS T (
    I SMALLINT NULL,
    V INT NULL,
    P CHAR(1) NULL,
    D VARCHAR(10) NULL,
    R BIGINT default (extract(epoch from now()) * 1000)
) PARTITION BY LIST (I);
CREATE UNLOGGED TABLE IF NOT EXISTS T_1  PARTITION OF T FOR VALUES IN (1);
CREATE UNLOGGED TABLE IF NOT EXISTS T_2  PARTITION OF T FOR VALUES IN (2);
CREATE UNLOGGED TABLE IF NOT EXISTS T_3  PARTITION OF T FOR VALUES IN (3);
CREATE UNLOGGED TABLE IF NOT EXISTS T_4  PARTITION OF T FOR VALUES IN (4);
CREATE UNLOGGED TABLE IF NOT EXISTS T_5  PARTITION OF T FOR VALUES IN (5);
CREATE INDEX C_X ON T (I);
CREATE INDEX R_X ON T (R DESC);
CLUSTER T USING C_X;
CREATE TRIGGER U_T_C_T AFTER INSERT ON T FOR EACH ROW EXECUTE FUNCTION U_T_C();

CREATE UNLOGGED TABLE IF NOT EXISTS T_C (
    I SMALLINT NULL,
    V INT NULL,
    P CHAR(1) NULL,
    D VARCHAR(10) NULL,
    R BIGINT NULL
);
CREATE INDEX C_X_T ON T_C (I);
CREATE INDEX R_X_T ON T (R DESC);

---PROCEDURE
CREATE OR REPLACE PROCEDURE U(V INT, II INT, INOUT NS INT DEFAULT NULL) AS $$
BEGIN UPDATE C SET S = S + V WHERE I = II RETURNING S INTO NS; END;
$$ LANGUAGE plpgsql;




